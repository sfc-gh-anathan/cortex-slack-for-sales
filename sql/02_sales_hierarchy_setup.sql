-- Sales Hierarchy and Compensation Tables Setup
-- This script creates the necessary tables for a sales organization with manager hierarchies and entitlements

USE SLACK_SALES_DEMO.SLACK_SCHEMA;

-- 1. SALES_EMPLOYEES: Master table for all sales employees
CREATE OR REPLACE TABLE SALES_EMPLOYEES (
    EMPLOYEE_ID VARCHAR(20) PRIMARY KEY,
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    ROLE VARCHAR(30) NOT NULL, -- 'Sales Rep', 'Sales Manager', 'Regional Manager', 'VP Sales'
    TERRITORY VARCHAR(50),
    REGION VARCHAR(50),
    HIRE_DATE DATE,
    BASE_SALARY DECIMAL(10,2),
    COMMISSION_RATE DECIMAL(5,4), -- e.g., 0.0250 for 2.5%
    QUOTA_AMOUNT DECIMAL(12,2),
    MANAGER_ID VARCHAR(20), -- Self-referencing foreign key
    ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (MANAGER_ID) REFERENCES SALES_EMPLOYEES(EMPLOYEE_ID)
);

-- 2. SALES_PERFORMANCE: Individual sales performance data
CREATE OR REPLACE TABLE SALES_PERFORMANCE (
    PERFORMANCE_ID VARCHAR(30) PRIMARY KEY,
    EMPLOYEE_ID VARCHAR(20) NOT NULL,
    PERIOD_YEAR INTEGER NOT NULL,
    PERIOD_MONTH INTEGER NOT NULL,
    PERIOD_QUARTER INTEGER NOT NULL,
    SALES_AMOUNT DECIMAL(12,2) DEFAULT 0,
    UNITS_SOLD INTEGER DEFAULT 0,
    NEW_CUSTOMERS INTEGER DEFAULT 0,
    DEALS_CLOSED INTEGER DEFAULT 0,
    QUOTA_ATTAINMENT DECIMAL(8,4), -- Percentage of quota achieved
    COMMISSION_EARNED DECIMAL(10,2),
    BONUS_EARNED DECIMAL(10,2),
    TOTAL_COMPENSATION DECIMAL(12,2),
    RANK_IN_TEAM INTEGER,
    RANK_IN_REGION INTEGER,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES SALES_EMPLOYEES(EMPLOYEE_ID)
);

-- 3. CUSTOMER_ASSIGNMENTS: Which customers each salesperson manages
CREATE OR REPLACE TABLE CUSTOMER_ASSIGNMENTS (
    ASSIGNMENT_ID VARCHAR(30) PRIMARY KEY,
    EMPLOYEE_ID VARCHAR(20) NOT NULL,
    CUSTOMER_ID VARCHAR(20) NOT NULL,
    ASSIGNED_DATE DATE NOT NULL,
    IS_PRIMARY BOOLEAN DEFAULT TRUE, -- Primary account owner vs support
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES SALES_EMPLOYEES(EMPLOYEE_ID)
);

-- 4. SALES_TRANSACTIONS: Enhanced transaction table with sales attribution
CREATE OR REPLACE TABLE SALES_TRANSACTIONS (
    TRANSACTION_ID VARCHAR(30) PRIMARY KEY,
    ORIGINAL_TRANSACTION_ID INTEGER, -- Links to original RETAIL_SALES_DATASET
    EMPLOYEE_ID VARCHAR(20) NOT NULL,
    CUSTOMER_ID VARCHAR(20) NOT NULL,
    TRANSACTION_DATE DATE NOT NULL,
    PRODUCT_CATEGORY VARCHAR(50),
    QUANTITY INTEGER,
    UNIT_PRICE DECIMAL(10,2),
    TOTAL_AMOUNT DECIMAL(12,2),
    COMMISSION_AMOUNT DECIMAL(10,2),
    DEAL_TYPE VARCHAR(20), -- 'New Business', 'Upsell', 'Renewal'
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES SALES_EMPLOYEES(EMPLOYEE_ID)
);

-- 5. DATA_ENTITLEMENTS: Controls what data each user can access
CREATE OR REPLACE TABLE DATA_ENTITLEMENTS (
    ENTITLEMENT_ID VARCHAR(30) PRIMARY KEY,
    EMPLOYEE_ID VARCHAR(20) NOT NULL,
    ACCESS_LEVEL VARCHAR(20) NOT NULL, -- 'SELF_ONLY', 'DIRECT_REPORTS', 'TEAM', 'REGION', 'ALL'
    CAN_VIEW_COMPENSATION BOOLEAN DEFAULT FALSE,
    CAN_VIEW_INDIVIDUAL_PERFORMANCE BOOLEAN DEFAULT TRUE,
    CAN_VIEW_TEAM_PERFORMANCE BOOLEAN DEFAULT FALSE,
    CAN_VIEW_CUSTOMER_DATA BOOLEAN DEFAULT TRUE,
    EFFECTIVE_DATE DATE NOT NULL,
    EXPIRY_DATE DATE,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES SALES_EMPLOYEES(EMPLOYEE_ID)
);

-- 6. MANAGER_HIERARCHY_VIEW: Recursive view to show full reporting structure
CREATE OR REPLACE VIEW MANAGER_HIERARCHY AS
WITH RECURSIVE hierarchy AS (
    -- Base case: employees with no manager (top level)
    SELECT 
        EMPLOYEE_ID,
        FIRST_NAME,
        LAST_NAME,
        ROLE,
        MANAGER_ID,
        1 as LEVEL,
        EMPLOYEE_ID as TOP_LEVEL_MANAGER,
        EMPLOYEE_ID as PATH
    FROM SALES_EMPLOYEES 
    WHERE MANAGER_ID IS NULL AND ACTIVE = TRUE
    
    UNION ALL
    
    -- Recursive case: employees with managers
    SELECT 
        e.EMPLOYEE_ID,
        e.FIRST_NAME,
        e.LAST_NAME,
        e.ROLE,
        e.MANAGER_ID,
        h.LEVEL + 1,
        h.TOP_LEVEL_MANAGER,
        h.PATH || ' -> ' || e.EMPLOYEE_ID
    FROM SALES_EMPLOYEES e
    INNER JOIN hierarchy h ON e.MANAGER_ID = h.EMPLOYEE_ID
    WHERE e.ACTIVE = TRUE
)
SELECT * FROM hierarchy;

-- 7. ACCESSIBLE_DATA_VIEW: Shows what data each employee can access based on entitlements
CREATE OR REPLACE VIEW ACCESSIBLE_DATA AS
SELECT DISTINCT
    e.EMPLOYEE_ID as VIEWING_EMPLOYEE_ID,
    sp.EMPLOYEE_ID as DATA_EMPLOYEE_ID,
    sp.PERIOD_YEAR,
    sp.PERIOD_MONTH,
    sp.SALES_AMOUNT,
    sp.UNITS_SOLD,
    sp.QUOTA_ATTAINMENT,
    CASE 
        WHEN ent.CAN_VIEW_COMPENSATION THEN sp.COMMISSION_EARNED
        ELSE NULL 
    END as COMMISSION_EARNED,
    CASE 
        WHEN ent.CAN_VIEW_COMPENSATION THEN sp.TOTAL_COMPENSATION
        ELSE NULL 
    END as TOTAL_COMPENSATION,
    se.FIRST_NAME,
    se.LAST_NAME,
    se.ROLE,
    se.TERRITORY,
    se.REGION
FROM SALES_EMPLOYEES e
CROSS JOIN SALES_PERFORMANCE sp
INNER JOIN SALES_EMPLOYEES se ON sp.EMPLOYEE_ID = se.EMPLOYEE_ID
INNER JOIN DATA_ENTITLEMENTS ent ON e.EMPLOYEE_ID = ent.EMPLOYEE_ID
WHERE 
    ent.EFFECTIVE_DATE <= CURRENT_DATE()
    AND (ent.EXPIRY_DATE IS NULL OR ent.EXPIRY_DATE >= CURRENT_DATE())
    AND (
        -- Can see own data
        (ent.ACCESS_LEVEL = 'SELF_ONLY' AND sp.EMPLOYEE_ID = e.EMPLOYEE_ID)
        OR
        -- Can see direct reports
        (ent.ACCESS_LEVEL = 'DIRECT_REPORTS' AND se.MANAGER_ID = e.EMPLOYEE_ID)
        OR
        -- Can see entire team (same manager)
        (ent.ACCESS_LEVEL = 'TEAM' AND se.MANAGER_ID = e.MANAGER_ID)
        OR
        -- Can see entire region
        (ent.ACCESS_LEVEL = 'REGION' AND se.REGION = e.REGION)
        OR
        -- Can see all data
        (ent.ACCESS_LEVEL = 'ALL')
    );